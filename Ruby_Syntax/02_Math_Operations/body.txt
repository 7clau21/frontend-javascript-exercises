Ruby provides traditional mathematical operations with numbers. Try running some basic operations in the console:

```ruby
p 1 + 2
p 5 - 1
p 6 / 2
p 4 * 3
```

Additionally, Ruby provides syntax for exponentials:

```ruby
p 2 ** 3
```

Not surprisingly, math operations in Ruby will generate a result. Results in programming are known as returns. For example, `2 + 3` would return a value of `5`.

Math operations can be run on variables that are assigned to numbers:

```ruby
x = 10
p x
x = x + 5
p x
```

Ruby has a shorthand syntax to reassign variables that already have values. For example, instead of writing `x = x + 5` you can use the `+=` operator:

```ruby
x = 10
p x
x += 5
p x
```

## Greater Than and Less Than
Basic math operations like `+` and `*` return numbers, but the `>` and `<` operators return boolean values. Type the following and keep your eyes on the return values:

```ruby
p 4 > 5
p 3 < 6
p 5 > 5
```

`>` and `<` are comparison operators, and therefore return `true` or `false`. Another comparison operator is `==`. Whereas the single `=` sign assigns a value, the `==` compares two values. Type the following to see how `==` works.

```ruby
p 4 == 5
p 3 == 3
```

## Practice
You can combine operators in the same equation, but it's important to understand Ruby's order of operations. You can use `(` `)` to group parts of the equation together, or use the default order of operations, which follows basic arithmetic principles. Type the following in the console and notice the differences:

```ruby
p (3 + 4) * 7
p 3 + 4 * 7
```

Now try to combine operations using variables:

```ruby
sum = 3 + 4
p sum * 7
```

You can also use variables with comparison operators:

```ruby
wins = 11
losses = 5
p wins > losses
p wins == losses
```

Some operations can be run on strings as well. For example, you can add a `String` to a `String`, or use a multiplier to achieve the same purpose:

```ruby
hello = "hello"
p hello * 3
p hello + " world"
```

While you can add strings to strings, it wouldn't make sense to add a `String` to a `Number`. The Ruby interpreter will throw an error saying `can't convert Fixnum into String`. Try it for yourself:

```ruby
p "hello " + 3
```

While `"hello" + 3` doesn't make sense, you can mix strings and numbers if the return is meant to be an alpha-numeric string. Combining strings and numbers is called string interpolation. String interpolation is the act of inserting a non-string value into a `String`, thus resulting in a `String`. Interpolation is accomplished with this `#{ }` syntax. Try it for yourself:

```ruby
p "hello #{3}"
num = 5
p "hello #{num}"
```

Notice the non-string values are contained inside of the `#{}`. You can also add more to the `String` after the `#{ }` syntax. The Ruby interpreter will run the code inside of the `#{ }` first and then return it to the outer `String`. This will ultimately return a `String` with all interpolated values accounted for.

```ruby
p "3 + 4 = #{3 + 4}"
num1 = 3
num2 = 4
p "3 + 4 = #{num1 + num2}"
```
## Staying DRY
You can make this code a little cleaner though. In the example below take note of the difference when the `num1` and `num2` variables are used by themselves (`#{num1}`) as opposed to in an operation (`#{num1 + num2}`).

```ruby
num1 = 3
num2 = 4
p "#{num1} + #{num2} = #{num1 + num2}"
```

Why is the second example better? In programming this is called "staying DRY". DRY stands for "do not repeat yourself." The reason why DRY code is better is because it's easier to maintain. For example, if you wanted to change the program to use `5` and `6` instead of `3` and `4`, you would only need to change each variable assignment (`num1` and `num2`), and not the interpolated string. In the first example, you'd have to change the variable assignments as well as the interpolated string.

Interpolated strings must be enclosed in double quotes. The Ruby interpreter will not search for interpolated values in a string if single quotes are used:

```ruby
p 'hello #{3}'
```

## A Sample Program and a Few More Concepts
Try coding this example for a compounding interest program:

```ruby
# principal amount
p = 10_000

# annual rate of interest
r = 0.05

# number of years
t = 5

# number of times it is compounded
n = 12

# amount accumulated
a = p * (1 + r/n) ** (n*t)

p "After #{t} years I'll have #{a} dollars!"
```

You were just exposed to a few new concepts with that example, consider the following:

* The `#` sign was preceded a line of text. This is called a "comment" in programming. The Ruby interpreter will ignore anything after the `#`, so you can format a comment any way you want. Comments are not needed for every line of code, but they are useful in explaining complex lines, or to give a general context of how the code is used.
* Notice the decimal used in the assignment of the `r` variable. Decimals in programming are called **Floats**.
* Notice the usage of the `_` in the assignment of the `p` variable. Ruby allows an `_` to be used in numbers for better readability. Although an `_` can be placed anywhere in a number, the best practice is to place them where a comma would normally be placed. (e.g. `1_000_000`)
