You've been exposed to a few methods in Ruby's core classes already. Ruby allows you to modify its core classes, which is something not all programming languages allow. For example, the `Array` class has an `each` method that can be called on an instance of an `Array`. As a Ruby programmer, you can add methods, like `each` to the `Array` class, or any other class for that matter. The example below demonstrates how to add an instance method named `plus_one` to the `FixNum` class. You can see that because `plus_one` is an instance method in the `Fixnum` class, you can call it on `5`. (Remember that `5` is simply an instance of the `Fixnum` class.)

```ruby
class Fixnum
  def plus_one
    self + 1
  end
end

5.plus_one  #=> 6
```

There's something else to note in the `plus_one` method - the use of `self`. When you called the `plus_one` method on `5`, `self` became `5` in the method, and was added to `1`. In this respect, you can think of `self` as an argument of sorts. An argument assumes the value of an object when the method is called, just like `self` assumes the value of the object which is receiving the instance method.

Add a method named `sum_numbers` to the `Array` class. The method should sum all of the numbers in the `Array` that it's called on.

Add a method named `camel_case` to the `String` class. The method should return a `String` with proper [camel case conventions](http://en.wikiversity.org/wiki/CamelCase).

> Hint: the [split](http://www.ruby-doc.org/core-2.0/String.html#method-i-split) method, [downcase](http://www.ruby-doc.org/core-2.0/String.html#method-i-downcase) method and [capitalize](http://www.ruby-doc.org/core-2.0/String.html#method-i-capitalize) method may help you solve this problem.

> Another hint: calling the `join` method on an `Array` creates a `String`. In that respect it's the opposite of the `split` method that can be called on a `String`.

Add a method named `add_index` to the `Array` class. The method should take the index value of an element's position and add it to the `String` in the same position.

> Hint: the `each_with_index` method should help you solve this problem. Try to find the `each_with_index` method yourself in Ruby Docs, and learn how it's used.

***